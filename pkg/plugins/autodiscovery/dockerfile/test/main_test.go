package dockerfile

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/updatecli/updatecli/pkg/plugins/autodiscovery/dockerfile"
)

func TestDiscoverManifests(t *testing.T) {
	// Disable condition testing with running short test
	if testing.Short() {
		return
	}

	testdata := []struct {
		name              string
		rootDir           string
		expectedPipelines []string
	}{
		{
			name:    "Scenario 1",
			rootDir: "testdata/updatecli-action",
			expectedPipelines: []string{`name: 'Bump Docker Image Tag for "updatecli/updatecli"'
sources:
  updatecli/updatecli:
    name: '[updatecli/updatecli] Get latest Docker Image Tag'
    kind: 'dockerimage'
    spec:
      image: 'updatecli/updatecli'
      tagFilter: '^v\d*(\.\d*){2}$'
      versionFilter:
        kind: 'semver'
        pattern: '>=v0.25.0'
targets:
  updatecli/updatecli:
    name: '[updatecli/updatecli] Bump Docker Image tag in "Dockerfile"'
    kind: 'yaml'
    spec:
      file: 'Dockerfile'
      instruction:
        keyword: 'FROM'
        matcher: 'updatecli/updatecli'
    sourceid: 'updatecli/updatecli'
`},
		},
		{
			name:    "Scenario 2: arg with suffix",
			rootDir: "testdata/jenkins",
			expectedPipelines: []string{`name: 'Bump Docker Image Tag for "jenkins/jenkins"'
sources:
  jenkins/jenkins:
    name: '[jenkins/jenkins] Get latest Docker Image Tag'
    kind: 'dockerimage'
    spec:
      image: 'jenkins/jenkins'
      tagFilter: '^\d*(\.\d*){2}-lts$'
      versionFilter:
        kind: 'semver'
        pattern: '>=2.235.1-lts'
targets:
  jenkins/jenkins:
    name: '[jenkins/jenkins] Bump Docker Image tag in "Dockerfile"'
    kind: 'yaml'
    spec:
      file: 'Dockerfile'
      instruction:
        keyword: 'ARG'
        matcher: 'jenkins_version'
    sourceid: 'jenkins/jenkins'
`},
		},
	}

	for _, tt := range testdata {

		t.Run(tt.name, func(t *testing.T) {
			dockerfile, err := dockerfile.New(
				dockerfile.Spec{
					RootDir: tt.rootDir,
				}, "", "", "")

			require.NoError(t, err)

			var pipelines []string
			rawPipelines, err := dockerfile.DiscoverManifests()
			require.NoError(t, err)

			for i := range rawPipelines {
				// We expected manifest generated by the autodiscovery to use the yaml syntax
				pipelines = append(pipelines, string(rawPipelines[i]))
			}
			assert.Equal(t, tt.expectedPipelines, pipelines)

		})
	}

}
